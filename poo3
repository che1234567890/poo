#crée par leonel akio briones et hanfei chen

import random
from colorama import init, Fore

# Initialiser colorama pour avoir un output lisible
init(autoreset=True)

"""
def des_20_faces(): 
    des = random.randint(1, 20)
    if des == 1:
      return 0
    elif des == 20:
      return _lancer_des(1, 8)
      print(f"{Fore.YELLOW} attaque critique!")
      heros.subir_dommage(_lancer_des(1, 8))
    else: 
      if des <= self.a
"""
    

#crée la classe npc
class NPC:
    def __init__(self, nom, race, espèce, profession):
        self.nom = nom
        self.race = race
        self.espèce = espèce
        self.profession = profession

        # Initialisation des caractéristiques avec des dés
        self.force = self._lancer_des(4, 6)
        self.agilité = self._lancer_des(4, 6)   
        self.constitution = self._lancer_des(4, 6)
        self.intelligence = self._lancer_des(4, 6)
        self.sagesse = self._lancer_des(4, 6)
        self.charisme = self._lancer_des(4, 6)

        # Initialisation de la classe d'armure et des points de vie
        self.classe_armure = self._lancer_des(2, 12)
        self.points_de_vie = self._lancer_des(2, 20)

    def _lancer_des(self, nb_des, faces):
        # Simulation d'un lancer de dés classique
        return sum(sorted([random.randint(1, faces) for _ in range(nb_des)])[1:])

    def afficher_caracteristiques(self):
        # Affichage des caractéristiques du NPC
        print(f"{Fore.GREEN}Nom: {self.nom}")
        print(f"Race: {self.race}")
        print(f"Espèce: {self.espèce}")
        print(f"Profession: {self.profession}")
        print(f"Force: {self.force}")
        print(f"Agilité: {self.agilité}")
        print(f"Constitution: {self.constitution}")
        print(f"Intelligence: {self.intelligence}")
        print(f"Sagesse: {self.sagesse}")
        print(f"Charisme: {self.charisme}")
        print(f"Classe d'armure: {self.classe_armure}")
        print(f"Points de vie: {self.points_de_vie}")
#classe kobold
class Kobold(NPC):
#définit la fonction d'attaque
    def attaquer(self, cible):
        print(f"{Fore.RED}{self.nom} attaque {cible.nom}!")
#recevoir le dommage
    def subir_dommage(self, quantite):
        print(f"{Fore.RED}{self.nom} subit {quantite} points de dommage!")
        self.points_de_vie -= quantite
#classe héro
class Heros(NPC):
#définit la fonction
    def attaquer(self, cible):
        print(f"{Fore.BLUE}{self.nom} attaque {cible.nom}!")
#recevoir le dommage
    def subir_dommage(self, quantite):
        print(f"{Fore.BLUE}{self.nom} subit {self.quantite} points de dommage!")
        self.points_de_vie -= quantite 

class des_20_faces(Heros, Kobold):
  def __init__(self, heros, Kobold):
    self.heros_armure = heros.classe_armure
    self.kobold_armure = Kobold.classe_armure
  
  def d20(adversaire): 
    des = random.randint(1, 20)
    d8 = sum(sorted([random.randint(1, faces) for _ in range(nb_des)])[1:])
    if des == 1:
      return 0
    elif des == 20:
      return d8
      print(f"{Fore.YELLOW} attaque critique!")
      heros.subir_dommage(d8)
    else: 
      if adversaire == "heros": 
        if des >= self.heros_armure:
          return des
        else: 
          return 0 
      
      if adversaire == "kobold":
        if des >= self.kobold_armure:
          return des 
        else:
          return 0
      
        
  
  

# Exemple d'utilisation
kobold = Kobold(nom="Kobold1", race="Kobold", espèce="Reptile", profession="Guerrier")
heros = Heros(nom="Héros1", race="Humain", espèce="Humanoid", profession="Paladin")
des = des_20_faces(Heros, Kobold)

kobold.afficher_caracteristiques()
heros.afficher_caracteristiques()

kobold.attaquer(heros)
heros.subir_dommage(des.d20("heros"))
